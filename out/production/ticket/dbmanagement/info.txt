Systemarchitektur:

Frontend: HTML, CSS, JavaScript
Backend: Java EE
Datenbank: PostgreSQL


Benutzeroberfläche (UI):

Registrierungsseite
Anmeldeseite
Hauptseite mit Veranstaltungsübersicht
Detailseite für einzelne Veranstaltungen
Warenkorb und Kaufabschluss-Seite


Datenbankstruktur:

Benutzer-Tabelle
Veranstaltungen-Tabelle
Tickets-Tabelle
Bestellungen-Tabelle


Funktionen:
a) Benutzer-Verwaltung:

Registrierung neuer Benutzer
Anmeldung existierender Benutzer
Abmeldung

b) Veranstaltungs-Verwaltung:

Anzeige aller Veranstaltungen
Detailansicht einer Veranstaltung

c) Ticket-Kauf:

Auswahl der Ticketanzahl
Hinzufügen zum Warenkorb
Kaufabschluss


API-Endpunkte:

POST /api/register
POST /api/login
GET /api/events
GET /api/events/{id}
POST /api/orders


Sicherheit:

Passwort-Hashing
JWT (JSON Web Tokens) für die Authentifizierung



Ticket-System-Projekt mit Java EE, HTML, CSS, JS und PostgreSQL
1. Frontend (HTML, CSS, JS)
Registrierungsseite

Formular mit Feldern für Benutzername, E-Mail und Passwort
Validierung der Eingaben (Client-seitig)
Absenden der Daten an den Server

Anmeldeseite

Formular mit Feldern für Benutzername und Passwort
Absenden der Daten an den Server
Speichern des erhaltenen JWT im Local Storage

Hauptseite (Veranstaltungsübersicht)

Anzeige aller verfügbaren Veranstaltungen in einer Liste oder einem Grid
Jede Veranstaltung zeigt ein Vorschaubild, Namen und Preis
Klickbare Elemente, die zur Detailseite führen

Detailseite für Veranstaltungen

Großes Bild der Veranstaltung
Name der Veranstaltung
Ausführliche Beschreibung
Ort der Veranstaltung
Preis pro Ticket
Anzahl der verfügbaren Tickets
Eingabefeld für die gewünschte Ticketanzahl
"In den Warenkorb"-Button

Warenkorb und Kaufabschluss

Übersicht der ausgewählten Tickets
Gesamtpreis
Möglichkeit, Tickets zu entfernen oder die Anzahl zu ändern
"Kaufen"-Button für den Abschluss der Bestellung

2. Backend (Java EE)
Servlets/REST-Endpunkte

RegisterServlet: Verarbeitung der Benutzerregistrierung
LoginServlet: Authentifizierung und JWT-Generierung
EventServlet: Abfrage aller Veranstaltungen oder einzelner Veranstaltungsdetails
OrderServlet: Verarbeitung von Ticketbestellungen

Services

UserService: Benutzerverwaltung (Registrierung, Anmeldung)
EventService: Verwaltung der Veranstaltungen und Tickets
OrderService: Verarbeitung von Bestellungen

Data Access Objects (DAOs)

UserDAO: Datenbankoperationen für Benutzer
EventDAO: Datenbankoperationen für Veranstaltungen
TicketDAO: Datenbankoperationen für Tickets
OrderDAO: Datenbankoperationen für Bestellungen

3. Datenbank (PostgreSQL)
Tabellen
users

id (Primary Key)
username
email
password_hash

events

id (Primary Key)
name
description
image_url
location
price
available_tickets

tickets

id (Primary Key)
event_id (Foreign Key zu events)
order_id (Foreign Key zu orders)

orders

id (Primary Key)
user_id (Foreign Key zu users)
order_date
total_price

4. Sicherheit

Verwendung von Prepared Statements für alle Datenbankabfragen zur Vermeidung von SQL-Injection
Hashing der Passwörter mit einem sicheren Algorithmus (z.B. bcrypt)
JWT für die Authentifizierung von API-Anfragen
HTTPS für die Verschlüsselung der Datenübertragung

5. Zusätzliche Funktionen (optional)

Suchfunktion für Veranstaltungen
Filterung von Veranstaltungen nach Kategorie, Datum oder Preis
Benutzerprofil-Seite mit Übersicht über gekaufte Tickets
Admin-Bereich zur Verwaltung von Veranstaltungen und Benutzern
E-Mail-Bestätigung nach Registrierung und Ticketkauf
